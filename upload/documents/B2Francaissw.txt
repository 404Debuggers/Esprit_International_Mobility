* Paradigme: exprime la façon dont un système a été conçu et pensé dans ses grandes lignes.
* Paradigme procédural:
	•Le programme est une liste des tâches et des opérations à exécuter.
	•Un Système informatique désordonné
	-Limites:
		-Tend à générer du code "Spaghetti" 
		-Maintenance complexe
		-Modularité et abstraction absente
		-Réutilisation ardue
* Paradigme objet:
	• L'idée est de concevoir les programmes non plus commedes lignes de codes qui s'exécutent 
	séquentiellement, mais comme des objets qui dialoguent
	• Sesprincipes incluent l'abstraction encapsulation,dedonnées,polymorphisme et héritage.
	-Limites:
		Réutilisation
		difficile Couplage fort -> maintenance
* Pradigme composant:
	•Construire une application composée par un ensemble de briques de base configurables 
	et réutilisables.
	•Il s'agit d'externaliser le code fonctionnel d'une application afin de le rendre
	réutilisable dans d'autres applications
	-Limites:
		Interopérabilité entre composants hétérogènes
* Paradigme service:
	•Prise en charge de la diversité l’hétérogénéité des logiciels, en termes de langages systèmes de 
	programmation, et de technologies de conception (et de réalisation) ou de plates-formes d’exécution
	•Le paradigme service permet de:
		-Réduire le couplage
		-Améliorer la réutilisation
		-Augmenter l’abstraction
* Middleware:
	Un logiciel servant d'intermédiaire entre d'autres logiciels; ou
	Un intermédiaire de communication entre des applications complexes et distribuées
* Rôles de base d’un middleware:
	▪ Résoudre l’intéropérabilité : Unifier l’accès à des machines distantes
	▪ Résoudre l’hétérogénéité : Etre indépendant des systèmes d’exploitation et du langage de
	programmation des applications
* Solutions existantes:
	– DCOM,
	– .NET Remoting
		• Middlware .Net
	– RMI (Remote Method Invocation)
		• Middlware Java permet de faire communiquer des objets java distribués sur le réseau
	– CORBA (Common Object Request Broker Architecture)
		• Permet de faire communiquer des objets écrits dans des langages différents 
		(C++, Java, Smalltalk)
* Services web:
	• est un programme informatique, permettant la communication et l'échange de données entre 
	applications et systèmes hétérogènes dans des environnements distribués.
	• Les services Web interagissent à travers l’échanges de messages
* familles de services web:
	•Les services web étendus utilisant les standards:
		• SOAP pour la communication ;
		• UDDI (annuaire) pour la publication ;
		• WSDL (contrat) pour la description
	•Les services web REST utilisant :
		•Directement HTTP au lieu d’une enveloppe SOAP ;
		•Un URI pour nommer et identifier une ressource ;
		•Les méthodes HTTP (POST, GET, PUT et DELETE) pour effectuer les opérations de base CRUD
* Avantages des services Web : 
	• Offrir une technologie adaptée aux applications B2B;
	• Réutilisables dans un environnement ouvert;
	• Utilisés par le Web Sémantique pas seulement le web interactif
	• Garantir un couplage lâche.
* Interopérabilité :
	Réfère à la capacité d’un système à coexister et à coopérer avec d’autres systèmes éventuellement 
	hétérogènes selon un schéma ouvert d'interconnexion.
* Integration :
	différents systèmes d'information apparaissent comme un seul.
* Caractéristiques d’un service :
 	-Contrat standardisé:L’ensemble des services d’un même Système Technique sont exposés au
	travers de contrats respectant les mêmes règles de standardisation.
	-Abstraction: Le service fonctionne en « boîte noire »
	Le fonctionnement interne du service (sa logique métier et son implémentation) ne sont pas visibles
	-Couplage lâche : Dépendance faible entre le consommateur et le service
	-Autonomie: Un service ne doit être dépendant d'aucun contexte ou service externe
	-Stateless: Un service ne stocke pas les informations des clients, les données et ne fait référence 
	à aucune transaction passée.
	-Composable: Un ensemble de services peuvent être composés à travers leur orchestration pour répondre
	à un besoin complexe;
* REST: REpresentational State Transfert
	est un style d’architecture inspiré de l’architecture du Web pour construire des services web
	Les applications respectant les architectures orientées ressources sont nommées RESTful
* REST:
	-est un style d'architecture non standarisé
	-un approche pour construire une application
*REST n'est pas:
	-un format
	-un protocole
	-un standard
*REST utilise les standards: HTTP,URL,XML/HTML
*Principes de REST:
URI+Représentation => Ressource
	-Une ressource: 
		Donne une vue sur l'état de la ressource
		Informations transférées entre le client et le serveur
	-Un identifiant de ressource: URI
	-Une représentation de la ressource:
		Désigne les données échangées entre le client et le serveur pour une 
		ressource:
			-le client (GET): format de sortie
			-le serveur (PUT et POST): format d’entrée
		Formats de représentation:XML,JSON,Text,HTML...
	-Interagir avec les ressources:
		Requêtes HTTP: GET,POST,PUT,DELETE
	-Méthode:
		Une ressource quelconque peut subir quatre opérations de base désignées par 
		CRUD (create,retrive,update,delete
*WADL: Web Application Description Language
*Service Web REST avec Java:
JAX-RS: Java API for RESTful Web Services il est basé sur des annotations Java 
*Annotation JAX-RS:
@Path: Définit le chemin de la ressource.Placé sur la class et/ou la méthode implémentant 
	le service
@GET,@PUT,@POST,@DELETE: Définit l'action implémentée par le service
@Produces: Spécifie le type de la réponse du service
@Consumes: Spécifie le type accepté en entré du service 
*JWT: JSON Web Tokens est un standard qui définit une solution compact et autonome
	permet de transmettre de maniére sécurisée des informations entre le applications en
	tant qu'objet structuré au format JSON
JWT est constitué de trois partie séparé par un point:
	Header.Payload.Signature


